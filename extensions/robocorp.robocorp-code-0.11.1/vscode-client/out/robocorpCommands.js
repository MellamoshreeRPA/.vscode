"use strict";
// Warning: Don't edit file (autogenerated from python -m dev codegen).
Object.defineProperty(exports, "__esModule", { value: true });
exports.ROBOCORP_RCC_TERMINAL_NEW = exports.ROBOCORP_CONFIGURATION_DIAGNOSTICS = exports.ROBOCORP_CONFIGURATION_DIAGNOSTICS_INTERNAL = exports.ROBOCORP_SUBMIT_ISSUE = exports.ROBOCORP_SUBMIT_ISSUE_INTERNAL = exports.ROBOCORP_SEND_METRIC = exports.ROBOCORP_CREATE_RCC_TERMINAL_TREE_SELECTION = exports.ROBOCORP_OPEN_LOCATOR_TREE_SELECTION = exports.ROBOCORP_CLOUD_UPLOAD_ROBOT_TREE_SELECTION = exports.ROBOCORP_OPEN_ROBOT_TREE_SELECTION = exports.ROBOCORP_COPY_LOCATOR_TO_CLIPBOARD_INTERNAL = exports.ROBOCORP_NEW_LOCATOR_UI_TREE_INTERNAL = exports.ROBOCORP_NEW_LOCATOR_UI = exports.ROBOCORP_GET_LOCATORS_JSON_INFO = exports.ROBOCORP_STOP_BROWSER_LOCATOR = exports.ROBOCORP_CREATE_LOCATOR_FROM_BROWSER_PICK_INTERNAL = exports.ROBOCORP_CREATE_LOCATOR_FROM_SCREEN_REGION_INTERNAL = exports.ROBOCORP_CREATE_LOCATOR_FROM_SCREEN_REGION = exports.ROBOCORP_CREATE_LOCATOR_FROM_BROWSER_PICK = exports.ROBOCORP_START_BROWSER_LOCATOR_INTERNAL = exports.ROBOCORP_START_BROWSER_LOCATOR = exports.ROBOCORP_REFRESH_CLOUD_VIEW = exports.ROBOCORP_RENAME_RESOURCE_IN_ROBOT_CONTENT_VIEW = exports.ROBOCORP_DELETE_RESOURCE_IN_ROBOT_CONTENT_VIEW = exports.ROBOCORP_NEW_FOLDER_IN_ROBOT_CONTENT_VIEW = exports.ROBOCORP_NEW_FILE_IN_ROBOT_CONTENT_VIEW = exports.ROBOCORP_REFRESH_ROBOT_CONTENT_VIEW = exports.ROBOCORP_REFRESH_ROBOTS_VIEW = exports.ROBOCORP_CLOUD_LOGOUT_INTERNAL = exports.ROBOCORP_CLOUD_LOGOUT = exports.ROBOCORP_RESOLVE_INTERPRETER = exports.ROBOCORP_SET_PYTHON_INTERPRETER = exports.ROBOCORP_COMPUTE_ROBOT_LAUNCH_FROM_ROBOCORP_CODE_LAUNCH = exports.ROBOCORP_LOAD_FROM_DISK_LRU = exports.ROBOCORP_SAVE_IN_DISK_LRU = exports.ROBOCORP_ROBOTS_VIEW_TASK_DEBUG = exports.ROBOCORP_ROBOTS_VIEW_TASK_RUN = exports.ROBOCORP_DEBUG_ROBOT_RCC = exports.ROBOCORP_RUN_ROBOT_RCC = exports.ROBOCORP_RUN_IN_RCC_INTERNAL = exports.ROBOCORP_UPLOAD_TO_EXISTING_ROBOT_INTERNAL = exports.ROBOCORP_UPLOAD_TO_NEW_ROBOT_INTERNAL = exports.ROBOCORP_CLOUD_LIST_WORKSPACES_INTERNAL = exports.ROBOCORP_CLOUD_LOGIN_INTERNAL = exports.ROBOCORP_CLOUD_LOGIN = exports.ROBOCORP_GET_LINKED_ACCOUNT_INFO_INTERNAL = exports.ROBOCORP_IS_LOGIN_NEEDED_INTERNAL = exports.ROBOCORP_LOCAL_LIST_ROBOTS_INTERNAL = exports.ROBOCORP_UPLOAD_ROBOT_TO_CLOUD = exports.ROBOCORP_CREATE_ROBOT_INTERNAL = exports.ROBOCORP_LIST_ROBOT_TEMPLATES_INTERNAL = exports.ROBOCORP_CREATE_ROBOT = exports.ROBOCORP_GET_PLUGINS_DIR = exports.ROBOCORP_GET_LANGUAGE_SERVER_PYTHON_INFO = exports.ROBOCORP_GET_LANGUAGE_SERVER_PYTHON = void 0;
exports.ROBOCORP_GET_LANGUAGE_SERVER_PYTHON = "robocorp.getLanguageServerPython"; // Get a python executable suitable to start the language server
exports.ROBOCORP_GET_LANGUAGE_SERVER_PYTHON_INFO = "robocorp.getLanguageServerPythonInfo"; // Get info suitable to start the language server {pythonExe, environ}
exports.ROBOCORP_GET_PLUGINS_DIR = "robocorp.getPluginsDir"; // Get the directory for plugins
exports.ROBOCORP_CREATE_ROBOT = "robocorp.createRobot"; // Create Robot
exports.ROBOCORP_LIST_ROBOT_TEMPLATES_INTERNAL = "robocorp.listRobotTemplates.internal"; // Provides a list with the available robot templates
exports.ROBOCORP_CREATE_ROBOT_INTERNAL = "robocorp.createRobot.internal"; // Actually calls rcc to create the robot
exports.ROBOCORP_UPLOAD_ROBOT_TO_CLOUD = "robocorp.uploadRobotToCloud"; // Upload Robot to the Robocorp Cloud
exports.ROBOCORP_LOCAL_LIST_ROBOTS_INTERNAL = "robocorp.localListRobots.internal"; // Lists the activities currently available in the workspace
exports.ROBOCORP_IS_LOGIN_NEEDED_INTERNAL = "robocorp.isLoginNeeded.internal"; // Checks if the user is already linked to an account
exports.ROBOCORP_GET_LINKED_ACCOUNT_INFO_INTERNAL = "robocorp.getLinkedAccountInfo.internal"; // Provides information related to the current linked account
exports.ROBOCORP_CLOUD_LOGIN = "robocorp.cloudLogin"; // Link to Robocorp Cloud
exports.ROBOCORP_CLOUD_LOGIN_INTERNAL = "robocorp.cloudLogin.internal"; // Link to Robocorp Cloud (receives credentials)
exports.ROBOCORP_CLOUD_LIST_WORKSPACES_INTERNAL = "robocorp.cloudListWorkspaces.internal"; // Lists the workspaces available for the user (in the Robocorp Cloud)
exports.ROBOCORP_UPLOAD_TO_NEW_ROBOT_INTERNAL = "robocorp.uploadToNewRobot.internal"; // Uploads a Robot as a new Robot in the Robocorp Cloud
exports.ROBOCORP_UPLOAD_TO_EXISTING_ROBOT_INTERNAL = "robocorp.uploadToExistingRobot.internal"; // Uploads a Robot as an existing Robot in the Robocorp Cloud
exports.ROBOCORP_RUN_IN_RCC_INTERNAL = "robocorp.runInRcc.internal"; // Runs a custom command in RCC
exports.ROBOCORP_RUN_ROBOT_RCC = "robocorp.runRobotRcc"; // Run Robot
exports.ROBOCORP_DEBUG_ROBOT_RCC = "robocorp.debugRobotRcc"; // Debug Robot
exports.ROBOCORP_ROBOTS_VIEW_TASK_RUN = "robocorp.robotsViewTaskRun"; // Launch selected Task in Robots view
exports.ROBOCORP_ROBOTS_VIEW_TASK_DEBUG = "robocorp.robotsViewTaskDebug"; // Debug selected Task in Robots view
exports.ROBOCORP_SAVE_IN_DISK_LRU = "robocorp.saveInDiskLRU"; // Saves some data in an LRU in the disk
exports.ROBOCORP_LOAD_FROM_DISK_LRU = "robocorp.loadFromDiskLRU"; // Loads some LRU data from the disk
exports.ROBOCORP_COMPUTE_ROBOT_LAUNCH_FROM_ROBOCORP_CODE_LAUNCH = "robocorp.computeRobotLaunchFromRobocorpCodeLaunch"; // Computes a robot launch debug configuration based on the robocorp code launch debug configuration
exports.ROBOCORP_SET_PYTHON_INTERPRETER = "robocorp.setPythonInterpreter"; // Set pythonPath based on robot.yaml
exports.ROBOCORP_RESOLVE_INTERPRETER = "robocorp.resolveInterpreter"; // Resolves the interpreter to be used given a path
exports.ROBOCORP_CLOUD_LOGOUT = "robocorp.cloudLogout"; // Unlink and remove credentials from Robocorp Cloud
exports.ROBOCORP_CLOUD_LOGOUT_INTERNAL = "robocorp.cloudLogout.internal"; // Unlink and remove credentials from Robocorp Cloud internal
exports.ROBOCORP_REFRESH_ROBOTS_VIEW = "robocorp.refreshRobotsView"; // Refresh Robots view
exports.ROBOCORP_REFRESH_ROBOT_CONTENT_VIEW = "robocorp.refreshRobotContentView"; // Refresh Robot Content view
exports.ROBOCORP_NEW_FILE_IN_ROBOT_CONTENT_VIEW = "robocorp.newFileInRobotContentView"; // New File
exports.ROBOCORP_NEW_FOLDER_IN_ROBOT_CONTENT_VIEW = "robocorp.newFolderInRobotContentView"; // New Folder
exports.ROBOCORP_DELETE_RESOURCE_IN_ROBOT_CONTENT_VIEW = "robocorp.deleteResourceInRobotContentView"; // Delete
exports.ROBOCORP_RENAME_RESOURCE_IN_ROBOT_CONTENT_VIEW = "robocorp.renameResourceInRobotContentView"; // Rename
exports.ROBOCORP_REFRESH_CLOUD_VIEW = "robocorp.refreshCloudView"; // Refresh Cloud view
exports.ROBOCORP_START_BROWSER_LOCATOR = "robocorp.startBrowserLocator"; // Start browser to create Locators
exports.ROBOCORP_START_BROWSER_LOCATOR_INTERNAL = "robocorp.startBrowserLocator.internal"; // Start browser to create Locators. Requires the robot where the locators should be saved
exports.ROBOCORP_CREATE_LOCATOR_FROM_BROWSER_PICK = "robocorp.createLocatorFromBrowserPick"; // Create Locator from browser pick
exports.ROBOCORP_CREATE_LOCATOR_FROM_SCREEN_REGION = "robocorp.createLocatorFromScreenRegion"; // Create Image Locator from screen region
exports.ROBOCORP_CREATE_LOCATOR_FROM_SCREEN_REGION_INTERNAL = "robocorp.createLocatorFromScreenRegion.internal"; // Create Image Locator from screen region (internal)
exports.ROBOCORP_CREATE_LOCATOR_FROM_BROWSER_PICK_INTERNAL = "robocorp.createLocatorFromBrowserPick.internal"; // Create Locator from browser pick (internal: provides no UI in case of errors)
exports.ROBOCORP_STOP_BROWSER_LOCATOR = "robocorp.stopBrowserLocator"; // Stop browser used to create Locators
exports.ROBOCORP_GET_LOCATORS_JSON_INFO = "robocorp.getLocatorsJsonInfo"; // Obtain information from the locators.json given a robot.yaml
exports.ROBOCORP_NEW_LOCATOR_UI = "robocorp.newLocatorUI"; // Create locator
exports.ROBOCORP_NEW_LOCATOR_UI_TREE_INTERNAL = "robocorp.newLocatorUI.tree.internal"; // New locator
exports.ROBOCORP_COPY_LOCATOR_TO_CLIPBOARD_INTERNAL = "robocorp.copyLocatorToClipboard.internal"; // Copy locator name to clipboard
exports.ROBOCORP_OPEN_ROBOT_TREE_SELECTION = "robocorp.openRobotTreeSelection"; // Open robot.yaml
exports.ROBOCORP_CLOUD_UPLOAD_ROBOT_TREE_SELECTION = "robocorp.cloudUploadRobotTreeSelection"; // Upload Robot to Robocorp Cloud
exports.ROBOCORP_OPEN_LOCATOR_TREE_SELECTION = "robocorp.openLocatorTreeSelection"; // Open locators.json
exports.ROBOCORP_CREATE_RCC_TERMINAL_TREE_SELECTION = "robocorp.rccTerminalCreateRobotTreeSelection"; // Open terminal with Robot environment
exports.ROBOCORP_SEND_METRIC = "robocorp.sendMetric"; // Send metric
exports.ROBOCORP_SUBMIT_ISSUE_INTERNAL = "robocorp.submitIssue.internal"; // Submit issue (internal)
exports.ROBOCORP_SUBMIT_ISSUE = "robocorp.submitIssue"; // Submit issue
exports.ROBOCORP_CONFIGURATION_DIAGNOSTICS_INTERNAL = "robocorp.configuration.diagnostics.internal"; // Robot Configuration Diagnostics (internal)
exports.ROBOCORP_CONFIGURATION_DIAGNOSTICS = "robocorp.configuration.diagnostics"; // Robot Configuration Diagnostics
exports.ROBOCORP_RCC_TERMINAL_NEW = "robocorp.rccTerminalNew"; // Terminal with Robot environment
//# sourceMappingURL=robocorpCommands.js.map